@page "/"

<div class="mdc-layout-grid__cell--span-12">
    <h1 class="mdc-typography--headline4">Blazor Bounce</h1>

    <p class="mdc-typography--body1">
        Demonstrates how Blazor two-way binding bounces when (i) components are enclosed in cascading values and (ii) those
        components use a javascript web library such as Google's Material Components Web.
    </p>

    <p class="mdc-typography--body1">
        Open developer tools to see output presented with <code>Console.WriteLine()</code>. You'll see notification of when a change
        event is received from Material Components Web setting <code>_componentValue</code> equal to the relevant selected <code>value</code>.
        Immediately after that you'll see which components (referenced by a guid releated unique id) are attempting to update values via JSInterop
        as a result of the relevant selection having been made.
    </p>

    <p class="mdc-typography--body1">
        See debouncing versus lack of debouncing in <code>DebouncedInputComponentFoundation.cs</code> and <code>BouncyInputComponentFoundation.cs</code>
        at lines 108-125 (code is the same) and 288-306 (the only place that differs between the selects).
    </p>
</div>



@*
    The following three divs have successfully debounced components
*@
<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Debounced / No Cascading Value</h1>

    <p>
        <DebouncedSelect @bind-Value="@DebouncedNoCascadingValue"
                         Label="Two Way Bound"
                         Items="@Rainbow" />
    </p>

    <p>
        <DebouncedSelect @bind-Value="@DebouncedNoCascadingValue"
                         Label="Two Way Bound"
                         Items="@Rainbow" />
    </p>

    <p>Value: '@DebouncedNoCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == DebouncedNoCascadingValue).FirstOrDefault()?.Label'</p>
</div>

<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Debounced / Fixed-True Cascading Value</h1>

    <CascadingValue Value="@FixedTrueCV" IsFixed="true">
        <p>
            <DebouncedSelect @bind-Value="@DebouncedFixedTrueCascadingValue"
                             Label="Two Way Bound"
                             Items="@Rainbow" />
        </p>

        <p>
            <DebouncedSelect @bind-Value="@DebouncedFixedTrueCascadingValue"
                             Label="Two Way Bound"
                             Items="@Rainbow" />
        </p>

        <p>Value: '@DebouncedFixedTrueCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == DebouncedFixedTrueCascadingValue).FirstOrDefault()?.Label'</p>
    </CascadingValue>
</div>

<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Debounced / Fixed-False Cascading Value</h1>

    <CascadingValue Value="@FixedFalseCV" IsFixed="false">
        <p>
            <DebouncedSelect @bind-Value="@DebouncedFixedFalseCascadingValue"
                             Label="Two Way Bound"
                             Items="@Rainbow" />
        </p>

        <p>
            <DebouncedSelect @bind-Value="@DebouncedFixedFalseCascadingValue"
                             Label="Two Way Bound"
                             Items="@Rainbow" />
        </p>

        <p>Value: '@DebouncedFixedFalseCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == DebouncedFixedFalseCascadingValue).FirstOrDefault()?.Label'</p>
    </CascadingValue>
</div>



@*
    The following three divs have components that don't benefit from debouncing
*@
<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Bouncy / No Cascading Value</h1>

    <p>
        <BouncySelect @bind-Value="@BouncyNoCascadingValue"
                      Label="Two Way Bound"
                      Items="@Rainbow" />
    </p>

    <p>
        <BouncySelect @bind-Value="@BouncyNoCascadingValue"
                      Label="Two Way Bound"
                      Items="@Rainbow" />
    </p>

    <p>Value: '@BouncyNoCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == BouncyNoCascadingValue).FirstOrDefault()?.Label'</p>
</div>

<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Bouncy / Fixed-True Cascading Value</h1>

    <CascadingValue Value="@FixedTrueCV" IsFixed="true">
        <p>
            <BouncySelect @bind-Value="@BouncyFixedTrueCascadingValue"
                          Label="Two Way Bound"
                          Items="@Rainbow" />
        </p>

        <p>
            <BouncySelect @bind-Value="@BouncyFixedTrueCascadingValue"
                          Label="Two Way Bound"
                          Items="@Rainbow" />
        </p>

        <p>Value: '@BouncyFixedTrueCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == BouncyFixedTrueCascadingValue).FirstOrDefault()?.Label'</p>
    </CascadingValue>
</div>

<div class="mdc-layout-grid__cell--span-4" style="background-color: #eee; padding: 1rem;">
    <h1 class="mdc-typography--headline6">Bouncy / Fixed-False Cascading Value</h1>

    <CascadingValue Value="@FixedFalseCV" IsFixed="false">
        <p>
            <BouncySelect @bind-Value="@BouncyFixedFalseCascadingValue"
                          Label="Two Way Bound"
                          Items="@Rainbow" />
        </p>

        <p>
            <BouncySelect @bind-Value="@BouncyFixedFalseCascadingValue"
                          Label="Two Way Bound"
                          Items="@Rainbow" />
        </p>

        <p>Value: '@BouncyFixedFalseCascadingValue'/'@Rainbow.Where(r => r.SelectedValue == BouncyFixedFalseCascadingValue).FirstOrDefault()?.Label'</p>
    </CascadingValue>
</div>


@code {
    static MBListElement<string>[] Rainbow = new MBListElement<string>[]
    {
        new MBListElement<string> { SelectedValue = "r", Label = "Red" },
        new MBListElement<string> { SelectedValue = "o", Label = "Orange" },
        new MBListElement<string> { SelectedValue = "y", Label = "Yellow" },
        new MBListElement<string> { SelectedValue = "g", Label = "Green" },
        new MBListElement<string> { SelectedValue = "b", Label = "Blue" },
        new MBListElement<string> { SelectedValue = "i", Label = "Indigo" },
        new MBListElement<string> { SelectedValue = "v", Label = "Violet" }
    };


    string DebouncedNoCascadingValue { get; set; } = Rainbow[0].SelectedValue;
    string DebouncedFixedTrueCascadingValue { get; set; } = Rainbow[0].SelectedValue;
    string DebouncedFixedFalseCascadingValue { get; set; } = Rainbow[0].SelectedValue;

    string BouncyNoCascadingValue { get; set; } = Rainbow[0].SelectedValue;
    string BouncyFixedTrueCascadingValue { get; set; } = Rainbow[0].SelectedValue;
    string BouncyFixedFalseCascadingValue { get; set; } = Rainbow[0].SelectedValue;


    

    MBCascadingDefaults FixedTrueCV = new MBCascadingDefaults
    {
        SelectInputStyle = MBSelectInputStyle.Outlined
    };

    MBCascadingDefaults FixedFalseCV = new MBCascadingDefaults
    {
        SelectInputStyle = MBSelectInputStyle.Outlined,
        ThemeDensity = MBDensity.Minus4
    };
}